{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, email, password) => dispatch => {\n  return AuthService.register(username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["D:/myBlog/myblog_client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,WANJ,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAAgCC,QAAD,IAAc;AACjE,SAAOL,WAAW,CAACC,QAAZ,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,QAAtC,EAAgDE,IAAhD,CACFC,QAAD,IAAc;AACVF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEd;AADD,KAAD,CAAR;AAIAW,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,WADD;AAELU,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFlB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GAZE,EAaFC,KAAD,IAAW;AACP,UAAMH,OAAO,GACRG,KAAK,CAACP,QAAN,IACGO,KAAK,CAACP,QAAN,CAAeG,IADlB,IAEGI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFxB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALJ;AAOAV,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEb;AADD,KAAD,CAAR;AAIAU,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,WADD;AAELU,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACH,GA/BE,CAAP;AAiCH,CAlCM;AAoCP,OAAO,MAAMC,KAAK,GAAG,CAACf,QAAD,EAAWE,QAAX,KAAyBC,QAAD,IAAc;AACvD,SAAOL,WAAW,CAACiB,KAAZ,CAAkBf,QAAlB,EAA4BE,QAA5B,EAAsCE,IAAtC,CACFI,IAAD,IAAU;AACNL,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEZ,aADD;AAELa,MAAAA,OAAO,EAAE;AAAES,QAAAA,IAAI,EAAER;AAAR;AAFJ,KAAD,CAAR;AAKA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACH,GARE,EASFC,KAAD,IAAW;AACP,UAAMH,OAAO,GACRG,KAAK,CAACP,QAAN,IACGO,KAAK,CAACP,QAAN,CAAeG,IADlB,IAEGI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFxB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALJ;AAOAV,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAIAQ,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,WADD;AAELU,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACH,GA3BE,CAAP;AA6BH,CA9BM;AAgCP,OAAO,MAAMG,MAAM,GAAG,MAAOd,QAAD,IAAc;AACtCL,EAAAA,WAAW,CAACmB,MAAZ;AAEAd,EAAAA,QAAQ,CAAC;AACLG,IAAAA,IAAI,EAAEV;AADD,GAAD,CAAR;AAGH,CANM","sourcesContent":["import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    SET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n    return AuthService.register(username, email, password).then(\r\n        (response) => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n            });\r\n\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: response.data.message,\r\n            });\r\n\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n\r\n            dispatch({\r\n                type: REGISTER_FAIL,\r\n            });\r\n\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n    return AuthService.login(username, password).then(\r\n        (data) => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: { user: data },\r\n            });\r\n\r\n            return Promise.resolve();\r\n        },\r\n        (error) => {\r\n            const message =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n\r\n            dispatch({\r\n                type: LOGIN_FAIL,\r\n            });\r\n\r\n            dispatch({\r\n                type: SET_MESSAGE,\r\n                payload: message,\r\n            });\r\n\r\n            return Promise.reject();\r\n        }\r\n    );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n    AuthService.logout();\r\n\r\n    dispatch({\r\n        type: LOGOUT,\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}